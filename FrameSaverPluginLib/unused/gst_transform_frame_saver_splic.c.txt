/*
 * GStreamer
 * Copyright (C) 2006 Stefan Kost <ensonic@users.sf.net>
 * Copyright (C) YEAR AUTHOR_NAME AUTHOR_EMAIL
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

/**
 * SECTION:element-plugin
 *
 * TODO: FrameSaverSplice_Description
 *
 * <refsect2>
 * <title>Example launch line</title>
 * |[
 * gst-launch -v -m fakesrc ! FrameSaverSplice ! fakesink silent=TRUE
 * ]|
 * </refsect2>
 */

#include <plugin_config.h>

#include <gst/gst.h>
#include <gst/base/base.h>
#include <gst/base/gstbasetransform.h>
#include <gst/controller/controller.h>


typedef struct _GstTransformFrameSaverSplice
{
  GstBaseTransform element;

  gboolean silent;

} GstTransformFrameSaverSplice;


typedef struct _GstTransformFrameSaverSpliceClass
{
  GstBaseTransformClass parent_class;

} GstTransformFrameSaverSpliceClass;


extern GType gst_transform_frame_saver_splice_get_type (void);

#define GST_TYPE_OF_TRANSFORM_FRAME_SAVER_SPLICE         (gst_transform_frame_saver_splice_get_type())

#define GST_TRANSFORM_FRAME_SAVER_SPLICE(obj)            (G_TYPE_CHECK_INSTANCE_CAST((obj), GST_TYPE_OF_TRANSFORM_FRAME_SAVER_SPLICE, GstTransformFrameSaverSplice))

#define GST_TRANSFORM_FRAME_SAVER_SPLICE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST((klass),  GST_TYPE_OF_TRANSFORM_FRAME_SAVER_SPLICE, GstTransformFrameSaverSpliceClass))

#define GST_IS_TRANSFORM_FRAME_SAVER_SPLICE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE((obj), GST_TYPE_OF_TRANSFORM_FRAME_SAVER_SPLICE))

#define GST_IS_TRANSFORM_FRAME_SAVER_SPLICE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass),  GST_TYPE_OF_TRANSFORM_FRAME_SAVER_SPLICE))

GST_DEBUG_CATEGORY_STATIC (gst_transform_frame_saver_splice_debug);

#define GST_CAT_DEFAULT gst_transform_frame_saver_splice_debug


/* Filter signals and args */
enum
{
  /* FILL ME */
  LAST_SIGNAL
};

enum
{
  PROP_0,
  PROP_SILENT,
};


G_DEFINE_TYPE (GstTransformFrameSaverSplice, gst_transform_frame_saver_splice, GST_TYPE_BASE_TRANSFORM);


/* the capabilities of the inputs and outputs. --- describe the real formats here. */
static GstStaticPadTemplate sink_template = GST_STATIC_PAD_TEMPLATE ( "sink",
                                                                      GST_PAD_SINK,
                                                                      GST_PAD_ALWAYS,
                                                                      GST_STATIC_CAPS ("ANY") );

static GstStaticPadTemplate src_template = GST_STATIC_PAD_TEMPLATE ( "src",
                                                                      GST_PAD_SRC,
                                                                      GST_PAD_ALWAYS,
                                                                      GST_STATIC_CAPS ("ANY") );

static void gst_transform_frame_saver_splice_set_property (GObject * object, guint prop_id, const GValue * value, GParamSpec * pspec);

static void gst_transform_frame_saver_splice_get_property (GObject * object, guint prop_id, GValue * value, GParamSpec * pspec);

static GstFlowReturn gst_transform_frame_saver_splice_ip (GstBaseTransform * base, GstBuffer * outbuf);


/* GObject vmethod implementations */
/* initialize the plugin's class */
static void gst_transform_frame_saver_splice_class_init (GstTransformFrameSaverSpliceClass * klass)
{
  GObjectClass * gobject_class = (GObjectClass *) klass;

  GstElementClass * gstelement_class = (GstElementClass *) klass;

  gobject_class->set_property = gst_transform_frame_saver_splice_set_property;

  gobject_class->get_property = gst_transform_frame_saver_splice_get_property;

  g_object_class_install_property (gobject_class,
                                   PROP_SILENT,
                                   g_param_spec_boolean ("silent", "Silent", "Produce verbose output ?",
                                   FALSE,
                                   G_PARAM_READWRITE | GST_PARAM_CONTROLLABLE));

  gst_element_class_set_details_simple (gstelement_class,
                                        "Plugin",
                                        "Generic/Filter",
                                        "TODO: Generic Template Filter",
                                        "TODO: AUTHOR_NAME AUTHOR_EMAIL");

  gst_element_class_add_pad_template (gstelement_class, gst_static_pad_template_get (&src_template));

  gst_element_class_add_pad_template (gstelement_class, gst_static_pad_template_get (&sink_template));

  GST_BASE_TRANSFORM_CLASS (klass)->transform_ip = GST_DEBUG_FUNCPTR (gst_transform_frame_saver_splice_ip);

  /* debug category for fltering log messages  */
  GST_DEBUG_CATEGORY_INIT (gst_transform_frame_saver_splice_debug, "plugin", 0, "FrameSaverSplice_Description");
}

/* initialize the new element
 * initialize instance structure
 */
static void gst_transform_frame_saver_splice_init (GstTransformFrameSaverSplice *filter)
{
  filter->silent = FALSE;
}

static void gst_transform_frame_saver_splice_set_property (GObject * object, guint prop_id, const GValue * value, GParamSpec * pspec)
{
  GstTransformFrameSaverSplice *filter = GST_TRANSFORM_FRAME_SAVER_SPLICE (object);

  switch (prop_id)
  {
    case PROP_SILENT:
      filter->silent = g_value_get_boolean (value);
      break;
    default:
      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
      break;
  }
}

static void gst_transform_frame_saver_splice_get_property (GObject * object, guint prop_id, GValue * value, GParamSpec * pspec)
{
  GstTransformFrameSaverSplice *filter = GST_TRANSFORM_FRAME_SAVER_SPLICE (object);

  switch (prop_id)
  {
    case PROP_SILENT:
      g_value_set_boolean (value, filter->silent);
      break;
    default:
      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
      break;
  }
}

/* GstBaseTransform vmethod implementations this function does the actual processing */
static GstFlowReturn gst_transform_frame_saver_splice_ip (GstBaseTransform * base, GstBuffer * outbuf)
{
  GstTransformFrameSaverSplice *filter = GST_TRANSFORM_FRAME_SAVER_SPLICE (base);

  if (GST_CLOCK_TIME_IS_VALID (GST_BUFFER_TIMESTAMP (outbuf)))
    gst_object_sync_values (GST_OBJECT (filter), GST_BUFFER_TIMESTAMP (outbuf));

  if (filter->silent == FALSE)
    g_print ("FrameSaverSplice is plugged in. \n");
  
  /* TODO: do something interesting here.  This simply copies the source
   * to the destination. */

  return GST_FLOW_OK;
}


/* entry point to initialize the plug-in
 * initialize the plug-in itself
 * register the element factories and other features
 */
static gboolean transform_frame_saver_splice_init (GstPlugin * plugin)
{
  return gst_element_register (plugin, "TransformFrameSaverSplice", GST_RANK_NONE, GST_TYPE_OF_TRANSFORM_FRAME_SAVER_SPLICE);
}

#if 0   // TODO: --- created global "gst_plugin_desc" whic is also created elsewhere

GST_PLUGIN_DEFINE ( /* gstreamer looks for this structure to register plugins */
    GST_VERSION_MAJOR,
    GST_VERSION_MINOR,
    plugin,
    "FrameSaverSplice_Description",
    plugin_init,
    VERSION,
    "LGPL",
    "GStreamer",
    "http://gstreamer.net/"
);

#endif

